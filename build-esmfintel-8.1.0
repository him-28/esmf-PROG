#!/bin/bash
#

#   Note - this is a modified source to fix the issue described at:
#   https://trac.macports.org/ticket/57493

#	Maintainer: Brian Vanderwende
#	Revised:   09:32, 07 Oct 2019

# ===== BUILD CONFIGURATION

# Configure environment
source /usr/share/Modules/init/sh
module purge
module load compiler/intel/20.0.1
module load mpi/2.3.3/intel/20.0.1
module load tool/netcdf/4.7.4/intel/20.0.1

# Setup variables
LMOD_FAMILY_MPI="mvapich2"
LMOD_FAMILY_MPI_VERSION="2.3.3"
export ESMF_COMM="mvapich2"
LMOD_FAMILY_COMPILER="intel"
LMOD_FAMILY_COMPILER_VERSION="20.0.1"
export ESMF_COMPILER="intel"

# Define global software settings
SWNAME=esmf
SWVERS=8.0.1
HPCI_SW_DIR=/scratch/cluster/himanshu/PROGS/build/$SWNAME/$SWVERS/$ESMF_COMM/$LMOD_FAMILY_MPI_VERSION/$LMOD_FAMILY_COMPILER/$LMOD_FAMILY_COMPILER_VERSION
MAKEJOBS=32

# Module configuration
# MODDESC provides "Help" description of software (use \n\n for paragraphs)
MODSITE=https://www.earthsystemcog.org/projects/esmf/
HPCI_MOD_DIR=/scratch/cluster/himanshu/PROGS/modulefiles

# Define build itinerary
SWPKGS[0]=${SWNAME}-$SWVERS

echo -e "\n>>> BEGINNING BUILD [${SWNAME}-${SWVERS}]\n"
echo "Building with ${LMOD_FAMILY_COMPILER} compilers ..."

# ===== UNPACK SOURCE FILES AND PREPARE GLOBAL ENVIRONMENT

# Set position indepedence and configure make for MPI
export {CPPFLAGS,CFLAGS,CXXFLAGS,FFLAGS,FCFLAGS,F77FLAGS,F90FLAGS}=-fPIC
PYMAJOR=$(module list |& grep -oP ' python/.{0,3}' | cut -d/ -f2)

# Make directory for build using PID to avoid clobbers from multiple builds
echo "Preparing source files ..."
BPID=$$
mkdir -p $BPID; cd $BPID

for P in ${!SWPKGS[@]}; do
	PKG=${SWPKGS[$P]}

	# Unpackage source files
	if [[ -e ../${PKG}.tar.gz ]]; then
        tar -xf ../${PKG}.tar.gz
		SRCDIR=$(ls -1c --color=never | head -1)
        [[ $SRCDIR != $PKG ]] && mv $SRCDIR $PKG
	else
		echo -e "\n*** ERROR: source for $PKG does not exist! Exiting ..."
		exit 2
	fi
done

# ===== BUILD AND INSTALL SOFTWARE PACKAGES

function run_cmd {
	echo -e "\n>>> RUNNING COMMAND [${1}]\n"

	eval $1
	RETVAL=${PIPESTATUS[0]}

	if [[ $RETVAL != 0 ]]; then
		echo -e "\n*** ERROR: command exited with code ${RETVAL}! Exiting ..."
		exit 1
	fi
}

echo -e "\n1) BUILDING PACKAGE [${SWPKGS[0]}] ...\n"
cd ${SWPKGS[0]}

# Set ESMF build variables
export ESMF_DIR=$(pwd -P)
export ESMF_INSTALL_PREFIX=$HPCI_SW_DIR
export ESMF_PIO="internal"
export ESMF_YAMLCPP="internal"

if [[ ${NETCDF}z != z ]]; then
    export ESMF_NETCDF=nc-config
fi

# Run both BOPT settings
for ESMF_BOPT in O g; do
    export ESMF_BOPT
    run_cmd "make -j $MAKEJOBS"
    run_cmd "make install"
done

cd ../../

# ===== CLEAN FILES

echo -e "\n<<< BUILD COMPLETE!\n"
echo "Cleaning source files ..."
rm -rf $BPID

# ===== INSTALL THE MODULE

# Set path for lua file
MODPATH=${HPCI_MOD_DIR}/esmfpkgs/${LMOD_FAMILY_COMPILER}/$LMOD_FAMILY_COMPILER_VERSION
[[ ${ESMF_NETCDF}z == z ]] && IOMOD=defio || IOMOD=ncdfio
MPIMOD=${ESMF_COMM}
MODSTUB=${MODPATH}/${SWNAME}-${SWVERS}-${IOMOD}-${MPIMOD}
DEPLIST=$(module list 2>&1 | awk -F '[0-9, ][0-9])' '{for(i=2;i<=NF;i++) {print "  "$i}}')

echo "Configuring and installing modulefile ..."

# Need to ensure group write access so git repository is consistent
umask 0002
mkdir -p $MODPATH

# Write the module file template for this software
for ESMF_BOPT in O g; do
MODFILE=${MODSTUB}-${ESMF_BOPT}.lua
echo "Path: ${MODFILE}"
cat > $MODFILE << EOF
require("posix")

-- The message printed by the module whatis command
whatis("${SWNAME} library v${SWVERS}")

-- The message printed by the module help command
help([[
This module loads the ESMF library v$SWVERS
for the $LMOD_FAMILY_COMPILER using these settings:

  ESMF_COMPILER       = $ESMF_COMPILER
  ESMF_BOPT           = $ESMF_BOPT
  ESMF_COMM           = $ESMF_COMM
EOF

if [[ ${ESMF_NETCDF}z != z ]]; then
cat >> $MODFILE << EOF
  ESMF_NETCDF         = $ESMF_NETCDF
  ESMF_NETCDF_INCLUDE = \${NETCDF}/include
  ESMF_NETCDF_LIBRARY = \${NETCDF}/lib
EOF
fi

cat >> $MODFILE << EOF

The module sets:

  ESMF_LIBDIR
  ESMFMKFILE  = \${ESMF_LIBDIR}/esmf.mk

Software website - ${MODSITE}

Built on $(date)
Modules used:
${DEPLIST}
]])

-- Set paths for software binaries, libraries
local basepath = "${HPCI_SW_DIR}"
local esmftype = "Linux.${ESMF_COMPILER}.64.${ESMF_COMM}.default"
local binpath  = pathJoin(basepath, "bin/bin${ESMF_BOPT}", esmftype) -- binaries
local libpath  = pathJoin(basepath, "lib/lib${ESMF_BOPT}", esmftype) -- libraries

-- Update path variables in user environment
prepend_path("PATH",    binpath)
prepend_path("LD_LIBRARY_PATH",    libpath)
setenv("ESMF_LIBDIR",   libpath)
setenv("ESMFMKFILE",    libpath .. "/esmf.mk")
EOF
done
